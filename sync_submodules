#!/bin/bash

# Origin: <https://claude.ai/public/artifacts/b20bdae5-c7cf-4956-954c-999ca3fbb695>

# sync_submodules.sh - Universal Git Submodule Synchronization Script
# 
# PURPOSE:
# This script automates the synchronization of git repositories in a team environment
# where a "superrepo" contains all team repositories as submodules.
#
# WHY THIS SCRIPT EXISTS:
# - Teams often struggle with keeping multiple repositories in sync
# - Manual submodule management is error-prone and time-consuming
# - Conflicts and divergent branches can cause confusion and lost work
# - This script provides a guided, safe workflow for synchronization
#
# WHAT IT DOES:
# 1. Pulls latest changes from all remotes (superrepo and submodules)
# 2. Detects conflicts and provides resolution guidance
# 3. Pushes local changes to remotes
# 4. Updates superrepo references when submodules change
# 5. Provides clear feedback about what's happening and why
#
# WORKFLOW:
# 1. Run ./sync_submodules.sh from the superrepo root
# 2. Follow any prompts for conflict resolution
# 3. The script will handle the rest automatically

set -euo pipefail

# Logging functions (respect non-TTY environments)
function _color() {
    local code="$1"; shift
    if [[ -t 1 ]]; then
        echo -e "\033[${code}m$*\033[0m"
    else
        echo "$*"
    fi
}
function INFO()  { _color "0;32" "INFO: $*"; }
function WARN()  { _color "0;33" "WARN: $*"; }
function ERROR() { _color "0;31" "ERROR: $*" >&2; }

# Helper function to check if there are uncommitted changes
function has_uncommitted_changes() {
    # Detect unstaged, staged, untracked files and submodule modifications
    if ! git diff --quiet --submodule || ! git diff --cached --quiet --submodule; then
        return 0
    fi
    if [[ -n $(git ls-files --others --exclude-standard) ]]; then
        return 0
    fi
    return 1
}

# Helper function to check if local branch is ahead of remote
function is_ahead_of_remote() {
    local ahead=$(git rev-list --count @{u}..HEAD 2>/dev/null || echo "0")
    [[ "$ahead" -gt 0 ]]
}

# Helper function to check if local branch is behind remote
function is_behind_remote() {
    local behind=$(git rev-list --count HEAD..@{u} 2>/dev/null || echo "0")
    [[ "$behind" -gt 0 ]]
}

# Helper function to get current branch name
function current_branch() {
    git rev-parse --abbrev-ref HEAD 2>/dev/null || echo "unknown"
}

# Helper function to check if a ref exists
function ref_exists() {
    git rev-parse --verify "$1" >/dev/null 2>&1
}

# Determine repo default branch (origin/HEAD) or fall back to main
function default_branch() {
    git symbolic-ref --quiet refs/remotes/origin/HEAD 2>/dev/null | \
        sed 's@^refs/remotes/origin/@@' || echo "main"
}

# Main synchronization function
function sync_repository() {
    local repo_path="${1:-.}"
    local repo_name="${2:-superrepo}"
    
    INFO "Processing $repo_name at $repo_path"
    
    pushd "$repo_path" >/dev/null || return 1
    
    # Check if it's a git repository
    if ! git rev-parse --git-dir >/dev/null 2>&1; then
        ERROR "$repo_path is not a git repository!"
        popd >/dev/null
        return 1
    fi
    
    local branch=$(current_branch)
    INFO "Current branch: $branch"

    # Handle detached-HEAD (typical after `git submodule update`)
    if [[ "$branch" == "HEAD" ]]; then
        local def_branch
        def_branch=$(default_branch)
        INFO "Detached HEAD detected – switching to $def_branch"
        if ! git switch "$def_branch" >/dev/null 2>&1; then
            WARN "Could not switch to $def_branch. Skipping sync for $repo_name."
            popd >/dev/null
            return 0
        fi
        branch="$def_branch"
    fi
    
    # Check for uncommitted changes
    if has_uncommitted_changes; then
        ERROR "Uncommitted changes detected in $repo_name!"
        WARN  "Please commit or stash your changes before syncing:"

        # Capture and show the status so we can inspect it
        local status_output
        status_output=$(git status --short --untracked-files=normal)
        echo "$status_output"
        echo

        # Extra help when the uncommitted changes are *only* submodule-pointer updates.
        # `git submodule status` prefixes such submodules with “+”.
        # Get the absolute path for clear instructions
        local abs_path=$(pwd)
        
        if git submodule status --recursive 2>/dev/null | grep -qE '^\+'; then
            WARN "It looks like one or more *submodules* have new commits."
            WARN "To update the parent repository to those commits:"
            WARN ""
            # Show specific submodules that need updating
            while IFS= read -r line; do
                if [[ "$line" =~ ^\+[[:space:]]*[^[:space:]]+[[:space:]]+([^[:space:]]+) ]]; then
                    local submodule_path="${BASH_REMATCH[1]}"
                    WARN "  For submodule: $submodule_path"
                    WARN "    git add $submodule_path"
                fi
            done < <(git submodule status --recursive | grep -E '^\+')
            WARN ""
            WARN "  Then commit all submodule updates:"
            WARN "    git commit -m 'chore: Update submodule references'"
            WARN "    git push"
            WARN ""
            WARN "  After that, re-run:"
            WARN "    ./sync_submodules"
        else
            # Regular uncommitted changes in current repo
            WARN "To commit these changes, run these commands:"
            WARN ""
            WARN "  cd $abs_path"
            WARN "  git add .    # This adds all changes. Use 'git add <file>' for specific files"
            WARN "  git commit -m 'Your descriptive commit message here'"
            WARN "  git push"
            WARN "  cd $(git rev-parse --show-toplevel)    # Return to superrepo root"
            WARN "  ./sync_submodules    # Re-run this sync script"
            WARN ""
            WARN "Or if you want to temporarily save these changes:"
            WARN "  git stash    # Saves changes temporarily"
            WARN "  # Then after sync completes:"
            WARN "  git stash pop    # Restores your changes"
        fi

        popd >/dev/null
        return 1
    fi
    
    # Fetch latest changes
    INFO "Fetching latest changes from remote..."
    if ! git fetch --all --prune; then
        ERROR "Failed to fetch from remote in $repo_name"
        popd >/dev/null
        return 1
    fi
    
    # Check if we have a tracking branch
    if ! git rev-parse --abbrev-ref --symbolic-full-name @{u} >/dev/null 2>&1; then
        local abs_path=$(pwd)
        WARN "No upstream branch set for $branch in $repo_name"
        WARN ""
        WARN "To set up tracking and push your branch:"
        WARN "  cd $abs_path"
        WARN "  git push -u origin $branch    # Pushes and sets up tracking"
        WARN ""
        WARN "Or if the branch already exists on remote:"
        WARN "  cd $abs_path"
        WARN "  git branch --set-upstream-to=origin/$branch $branch"
        WARN ""
        WARN "After setting up tracking, return to superrepo and re-run:"
        WARN "  cd $(git rev-parse --show-toplevel)"
        WARN "  ./sync_submodules"
        popd >/dev/null
        return 0
    fi
    
    # Check sync status
    local needs_pull=false
    local needs_push=false
    
    if is_behind_remote; then
        needs_pull=true
        INFO "$repo_name is behind remote"
    fi
    
    if is_ahead_of_remote; then
        needs_push=true
        INFO "$repo_name is ahead of remote"
    fi
    
    # Handle pulling changes
    if [[ "$needs_pull" == "true" ]]; then
        if [[ "$needs_push" == "true" ]]; then
            # We have diverged - need user intervention
            local abs_path=$(pwd)
            ERROR "$repo_name has diverged from remote!"
            WARN "Your branch and remote have different commits."
            WARN ""
            WARN "To resolve, run ONE of these options from the repository:"
            WARN ""
            WARN "Option 1 - Merge (creates a merge commit):"
            WARN "  cd $abs_path"
            WARN "  git pull --no-rebase"
            WARN "  # Resolve any conflicts if they occur"
            WARN "  git push"
            WARN ""
            WARN "Option 2 - Rebase (cleaner history, recommended for unpushed commits):"
            WARN "  cd $abs_path"
            WARN "  git pull --rebase"
            WARN "  # Resolve any conflicts if they occur"
            WARN "  git push"
            WARN ""
            WARN "Option 3 - Force push (DANGEROUS - only if you're sure):"
            WARN "  cd $abs_path"
            WARN "  git push --force-with-lease"
            WARN ""
            WARN "After resolving, return to superrepo and re-run:"
            WARN "  cd $(git rev-parse --show-toplevel)"
            WARN "  ./sync_submodules"
            popd >/dev/null
            return 1
        else
            # Just behind - safe to pull
            INFO "Pulling changes from remote..."
            if ! git pull --ff-only; then
                local abs_path=$(pwd)
                ERROR "Fast-forward pull failed in $repo_name"
                WARN "This might indicate a complex merge situation"
                WARN ""
                WARN "To resolve, try one of these commands:"
                WARN "  cd $abs_path"
                WARN "  git pull --no-ff    # Creates a merge commit"
                WARN "  # OR"
                WARN "  git pull --rebase   # Rebases your changes on top"
                WARN ""
                WARN "After resolving, return to superrepo and re-run:"
                WARN "  cd $(git rev-parse --show-toplevel)"
                WARN "  ./sync_submodules"
                popd >/dev/null
                return 1
            fi
            INFO "Successfully pulled changes"
        fi
    fi
    
    # Handle pushing changes
    if [[ "$needs_push" == "true" ]] && [[ "$needs_pull" == "false" ]]; then
        INFO "Pushing local changes to remote..."
        if ! git push; then
            local abs_path=$(pwd)
            ERROR "Failed to push changes in $repo_name"
            WARN "Possible reasons:"
            WARN "  - No push permissions"
            WARN "  - Remote has protected branch rules"
            WARN "  - Network issues"
            WARN "  - Remote has newer changes (try pulling first)"
            WARN ""
            WARN "To troubleshoot:"
            WARN "  cd $abs_path"
            WARN "  git remote -v           # Check remote URLs"
            WARN "  git fetch --all         # Fetch latest changes"
            WARN "  git status              # Check current state"
            WARN "  git pull --rebase       # If remote has newer changes"
            WARN "  git push                # Try pushing again"
            WARN ""
            WARN "After resolving, return to superrepo and re-run:"
            WARN "  cd $(git rev-parse --show-toplevel)"
            WARN "  ./sync_submodules"
            popd >/dev/null
            return 1
        fi
        INFO "Successfully pushed changes"
    fi
    
    popd >/dev/null
    return 0
}

# Function to sync all submodules
function sync_all_submodules() {
    INFO "Starting submodule synchronization..."
    
    # Initialize and update submodules
    INFO "Initializing and updating submodules..."
    git submodule update --init --recursive
    
    # Get list of submodules (handles paths with spaces)
    local submodules
    submodules=$(git submodule foreach --recursive --quiet 'printf "%s\n" "$sm_path"')
    
    if [[ -z "$submodules" ]]; then
        INFO "No submodules found"
        return 0
    fi
    
    local failed_repos=()
    local processed_submodules=()
    
    # Sync each submodule
    while IFS= read -r submodule; do
        if [[ -n "$submodule" ]]; then
            processed_submodules+=("$submodule")
            echo
            if ! sync_repository "$submodule" "submodule:$submodule"; then
                failed_repos+=("$submodule")
            fi
        fi
    done <<< "$submodules"

    # Second pass (bottom-up) to commit/push parent submodule pointers
    for (( idx=${#processed_submodules[@]}-1 ; idx>=0 ; idx-- )); do
        parent="${processed_submodules[idx]}"
        # Only relevant if the repo *has* its own submodules
        if [[ -f "$parent/.gitmodules" ]]; then
            pushd "$parent" >/dev/null
            if ! update_superrepo_references; then
                failed_repos+=("$parent (update refs)")
            fi
            popd >/dev/null
        fi
    done
    
    if [[ ${#failed_repos[@]} -gt 0 ]]; then
        ERROR "Failed to sync the following submodules:"
        for repo in "${failed_repos[@]}"; do
            ERROR "  - $repo"
        done
        return 1
    fi
    
    INFO "All submodules synced successfully"
    return 0
}

# Function to update superrepo references
function update_superrepo_references() {
    INFO "Checking if superrepo references need updating..."
    
    local changes_detected=false
    local submodules_to_update=()
    
    # Check each submodule for changes
    while IFS= read -r line; do
        if [[ -n "$line" ]]; then
            local status="${line:0:1}"
            local submodule="${line:1}"
            submodule="${submodule%% *}"  # Remove everything after first space
            
            if [[ "$status" == "+" ]]; then
                INFO "Submodule $submodule has new commits"
                changes_detected=true
                submodules_to_update+=("$submodule")
                git add "$submodule"
            elif [[ "$status" == "-" ]]; then
                WARN "Submodule $submodule is behind its index"
                changes_detected=true
            elif [[ "$status" == "U" ]]; then
                ERROR "Submodule $submodule has merge conflicts!"
                return 1
            fi
        fi
    done < <(git submodule status --recursive)
    
    if [[ "$changes_detected" == "true" ]]; then
        INFO "Submodule references have changed"
        
        # Check if we have staged changes
        if git diff --cached --quiet; then
            INFO "No submodule updates to commit"
            return 0
        fi
        
        # Check if there are only submodule updates (no other changes)
        local other_changes=$(git diff --name-only | grep -v -E "^(${submodules_to_update[@]// /|})$" || true)
        
        if [[ -z "$other_changes" ]]; then
            # Only submodule updates detected
            INFO ""
            INFO "Only submodule updates detected. Would you like to automatically:"
            INFO "  1. Add all submodule changes"
            INFO "  2. Create a commit with message: 'chore: Update submodule references'"
            INFO "  3. Push with --recurse-submodules=on-demand"
            INFO ""
            read -p "Proceed with automatic commit and push? [Y/n] " -n 1 -r
            echo
            
            if [[ $REPLY =~ ^[Yy]$ ]] || [[ -z $REPLY ]]; then
                # Create commit message listing all updated submodules
                local commit_msg="chore: Update submodule references

Updated submodules:
$(git diff --cached --name-only | sed 's/^/- /')"
                
                INFO "Creating commit for submodule updates..."
                if git commit -m "$commit_msg"; then
                    INFO "Commit created successfully"
                    
                    INFO "Pushing with --recurse-submodules=on-demand..."
                    if git push --recurse-submodules=on-demand; then
                        INFO "Successfully pushed superrepo and submodule changes"
                    else
                        ERROR "Failed to push changes"
                        WARN "You may need to:"
                        WARN "  git pull --rebase"
                        WARN "  git push --recurse-submodules=on-demand"
                        return 1
                    fi
                else
                    ERROR "Failed to create commit"
                    return 1
                fi
            else
                INFO "Skipping automatic commit"
                WARN "To manually commit these changes:"
                WARN "  git commit -m 'chore: Update submodule references'"
                WARN "  git push --recurse-submodules=on-demand"
            fi
        else
            # Mixed changes detected
            WARN "Detected both submodule updates and other file changes"
            WARN "Please commit manually to ensure proper commit message"
            WARN ""
            WARN "Suggested commands:"
            WARN "  git add ."
            WARN "  git commit -m 'Your descriptive message here'"
            WARN "  git push --recurse-submodules=on-demand"
        fi
    else
        INFO "No submodule reference updates needed"
    fi
    
    return 0
}

# Main execution
function main() {
    INFO "=== Git Submodule Sync Script ==="
    INFO "This script will sync your superrepo and all submodules"
    echo
    
    # Check if we're in a git repository
    if ! git rev-parse --git-dir >/dev/null 2>&1; then
        ERROR "Not in a git repository!"
        ERROR "Please run this script from your superrepo root"
        exit 1
    fi
    
    # Get repository root
    local repo_root=$(git rev-parse --show-toplevel)
    cd "$repo_root"
    
    INFO "Working in repository: $repo_root"
    echo
    
    # Step 1: Sync the superrepo
    INFO "=== Step 1: Syncing superrepo ==="
    if ! sync_repository "." "superrepo"; then
        ERROR "Failed to sync superrepo"
        ERROR "Please resolve the issues above and run the script again"
        exit 1
    fi
    echo
    
    # Step 2: Sync all submodules
    INFO "=== Step 2: Syncing submodules ==="
    if ! sync_all_submodules; then
        ERROR "Failed to sync all submodules"
        ERROR "Please resolve the issues in the affected submodules and run again"
        exit 1
    fi
    echo
    
    # Step 3: Update superrepo references if needed
    INFO "=== Step 3: Updating superrepo references ==="
    if ! update_superrepo_references; then
        ERROR "Failed to update superrepo references"
        exit 1
    fi
    echo
    
    INFO "=== Synchronization complete! ==="
    INFO "All repositories are now in sync with their remotes"
    INFO "Your teammates will receive your changes on their next sync"
}

# Run main function
main "$@"
